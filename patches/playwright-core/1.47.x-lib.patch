--- a/lib/server/chromium/crDevTools.js	
+++ b/lib/server/chromium/crDevTools.js	
@@ -66,7 +66,11 @@
         contextId: event.executionContextId
       }).catch(e => null);
     });
-    Promise.all([session.send('Runtime.enable'), session.send('Runtime.addBinding', {
+    Promise.all([(() => {
+      if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+        return session.send('Runtime.enable', {});
+      }
+    })(), session.send('Runtime.addBinding', {
       name: kBindingName
     }), session.send('Page.enable'), session.send('Page.addScriptToEvaluateOnNewDocument', {
       source: `

--- a/lib/server/chromium/crPage.js	
+++ b/lib/server/chromium/crPage.js	
@@ -445,7 +445,11 @@
       }
     }), this._client.send('Log.enable', {}), lifecycleEventsEnabled = this._client.send('Page.setLifecycleEventsEnabled', {
       enabled: true
-    }), this._client.send('Runtime.enable', {}), this._client.send('Runtime.addBinding', {
+    }), (() => {
+      if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+        return this._client.send('Runtime.enable', {});
+      }
+    })(), this._client.send('Runtime.addBinding', {
       name: _page.PageBinding.kPlaywrightBinding
     }), this._client.send('Page.addScriptToEvaluateOnNewDocument', {
       source: '',
@@ -624,8 +628,11 @@
     session.once('Runtime.executionContextCreated', async event => {
       worker._createExecutionContext(new _crExecutionContext.CRExecutionContext(session, event.context));
     });
-    // This might fail if the target is closed before we initialize.
-    session._sendMayFail('Runtime.enable');
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+      // This might fail if the target is closed before we initialize.
+      session._sendMayFail('Runtime.enable');
+    }
+
     // TODO: attribute workers to the right frame.
     this._crPage._networkManager.addSession(session, (_this$_page$_frameMan = this._page._frameManager.frame(this._targetId)) !== null && _this$_page$_frameMan !== void 0 ? _this$_page$_frameMan : undefined).catch(() => {});
     session._sendMayFail('Runtime.runIfWaitingForDebugger');

--- a/lib/server/chromium/crServiceWorker.js	
+++ b/lib/server/chromium/crServiceWorker.js	
@@ -46,7 +46,9 @@
       this.updateOffline();
       this._networkManager.addSession(session, undefined, true /* isMain */).catch(() => {});
     }
-    session.send('Runtime.enable', {}).catch(e => {});
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+      session.send('Runtime.enable', {}).catch(e => {});
+    }
     session.send('Runtime.runIfWaitingForDebugger').catch(e => {});
     session.on('Inspector.targetReloadedAfterCrash', () => {
       // Resume service worker after restart.

--- a/lib/server/frames.js	
+++ b/lib/server/frames.js	
@@ -22,6 +22,7 @@
 var _frameSelectors = require("./frameSelectors");
 var _errors = require("./errors");
 var _fileUploadUtils = require("./fileUploadUtils");
+var _crExecutionContext = require("./chromium/crExecutionContext");
 function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
 function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
 /**
@@ -60,6 +61,7 @@
     this._webSockets = new Map();
     this._openedDialogs = new Set();
     this._closeAllOpeningDialogs = false;
+    this._isolatedContext = undefined;
     this._page = page;
     this._mainFrame = undefined;
   }
@@ -427,6 +429,7 @@
     if (this._inflightRequests.size === 0) this._startNetworkIdleTimer();
     this._page.mainFrame()._recalculateNetworkIdle(this);
     this._onLifecycleEvent('commit');
+    this._isolatedContext = undefined;
   }
   setPendingDocument(documentInfo) {
     this._pendingDocument = documentInfo;
@@ -582,6 +585,34 @@
     return this._page._delegate.getFrameElement(this);
   }
   _context(world) {
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] !== '0') {
+      // rebrowser-patches: use only utility context, create it on demand and cache
+      if (this._isolatedContext !== undefined) {
+        return this._isolatedContext;
+      }
+      const utilityWorldName = process.env['REBROWSER_PATCHES_UTILITY_WORLD_NAME'] !== '0' ? process.env['REBROWSER_PATCHES_UTILITY_WORLD_NAME'] || 'util' : '__playwright_utility_world__';
+      return this._page._delegate._mainFrameSession._client.send('Page.createIsolatedWorld', {
+        frameId: this._id,
+        grantUniveralAccess: true,
+        worldName: utilityWorldName
+      }).then(createIsolatedWorldResult => {
+        const contextPayload = {
+          id: createIsolatedWorldResult.executionContextId,
+          name: utilityWorldName,
+          auxData: {
+            frameId: this._id,
+            isDefault: false
+          }
+        };
+        const delegate = new _crExecutionContext.CRExecutionContext(this._page._delegate._mainFrameSession._client, contextPayload);
+        this._isolatedContext = new dom.FrameExecutionContext(delegate, this, 'utility');
+        return this._isolatedContext;
+      }).catch(error => {
+        // probably target is closed
+        _debugLogger.debugLogger.log('error', error);
+        console.error('[rebrowser-patches][frames._context] cannot create utility world');
+      });
+    }
     return this._contextData.get(world).contextPromise.then(contextOrDestroyedReason => {
       if (contextOrDestroyedReason instanceof js.ExecutionContext) return contextOrDestroyedReason;
       throw new Error(contextOrDestroyedReason.destroyedReason);
