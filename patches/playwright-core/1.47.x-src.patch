--- a/src/server/chromium/crDevTools.ts	
+++ b/src/server/chromium/crDevTools.ts	
@@ -66,7 +66,11 @@
       }).catch(e => null);
     });
     Promise.all([
-      session.send('Runtime.enable'),
+      (() => {
+        if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+          return session.send('Runtime.enable', {})
+        }
+      })(),
       session.send('Runtime.addBinding', { name: kBindingName }),
       session.send('Page.enable'),
       session.send('Page.addScriptToEvaluateOnNewDocument', { source: `

--- a/src/server/chromium/crPage.ts	
+++ b/src/server/chromium/crPage.ts	
@@ -528,7 +528,11 @@
       }),
       this._client.send('Log.enable', {}),
       lifecycleEventsEnabled = this._client.send('Page.setLifecycleEventsEnabled', { enabled: true }),
-      this._client.send('Runtime.enable', {}),
+      (() => {
+        if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+          return this._client.send('Runtime.enable', {})
+        }
+      })(),
       this._client.send('Runtime.addBinding', { name: PageBinding.kPlaywrightBinding }),
       this._client.send('Page.addScriptToEvaluateOnNewDocument', {
         source: '',
@@ -744,8 +748,11 @@
     session.once('Runtime.executionContextCreated', async event => {
       worker._createExecutionContext(new CRExecutionContext(session, event.context));
     });
-    // This might fail if the target is closed before we initialize.
-    session._sendMayFail('Runtime.enable');
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+      // This might fail if the target is closed before we initialize.
+      session._sendMayFail('Runtime.enable');
+    }
+
     // TODO: attribute workers to the right frame.
     this._crPage._networkManager.addSession(session, this._page._frameManager.frame(this._targetId) ?? undefined).catch(() => {});
     session._sendMayFail('Runtime.runIfWaitingForDebugger');

--- a/src/server/chromium/crServiceWorker.ts	
+++ b/src/server/chromium/crServiceWorker.ts	
@@ -44,7 +44,9 @@
       this._networkManager.addSession(session, undefined, true /* isMain */).catch(() => {});
     }
 
-    session.send('Runtime.enable', {}).catch(e => { });
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] === '0') {
+      session.send('Runtime.enable', {}).catch(e => { });
+    }
     session.send('Runtime.runIfWaitingForDebugger').catch(e => { });
     session.on('Inspector.targetReloadedAfterCrash', () => {
       // Resume service worker after restart.

--- a/src/server/frames.ts	
+++ b/src/server/frames.ts	
@@ -41,6 +41,7 @@
 import { FrameSelectors } from './frameSelectors';
 import { TimeoutError } from './errors';
 import { prepareFilesForUpload } from './fileUploadUtils';
+import { CRExecutionContext } from './chromium/crExecutionContext';
 
 type ContextData = {
   contextPromise: ManualPromise<dom.FrameExecutionContext | { destroyedReason: string }>;
@@ -100,6 +101,7 @@
   private _webSockets = new Map<string, network.WebSocket>();
   _openedDialogs: Set<Dialog> = new Set();
   private _closeAllOpeningDialogs = false;
+  _isolatedContext = undefined;
 
   constructor(page: Page) {
     this._page = page;
@@ -531,6 +533,7 @@
       this._startNetworkIdleTimer();
     this._page.mainFrame()._recalculateNetworkIdle(this);
     this._onLifecycleEvent('commit');
+    this._isolatedContext = undefined
   }
 
   setPendingDocument(documentInfo: DocumentInfo | undefined) {
@@ -735,6 +738,38 @@
   }
 
   _context(world: types.World): Promise<dom.FrameExecutionContext> {
+    if (process.env['REBROWSER_PATCHES_RUNTIME_FIX_MODE'] !== '0') {
+      // rebrowser-patches: use only utility context, create it on demand and cache
+      if (this._isolatedContext !== undefined) {
+        return this._isolatedContext
+      }
+
+      const utilityWorldName = process.env['REBROWSER_PATCHES_UTILITY_WORLD_NAME'] !== '0' ? (process.env['REBROWSER_PATCHES_UTILITY_WORLD_NAME'] || 'util') : '__playwright_utility_world__';
+      return this._page._delegate._mainFrameSession._client.send('Page.createIsolatedWorld', {
+        frameId: this._id,
+        grantUniveralAccess: true,
+        worldName: utilityWorldName,
+      })
+        .then((createIsolatedWorldResult) => {
+          const contextPayload = {
+            id: createIsolatedWorldResult.executionContextId,
+            name: utilityWorldName,
+            auxData: {
+              frameId: this._id,
+              isDefault: false
+            }
+          }
+          const delegate = new CRExecutionContext(this._page._delegate._mainFrameSession._client, contextPayload);
+          this._isolatedContext = new dom.FrameExecutionContext(delegate, this, 'utility');
+          return this._isolatedContext
+        })
+        .catch(error => {
+          // probably target is closed
+          debugLogger.log('error', error)
+          console.error('[rebrowser-patches][frames._context] cannot create utility world')
+        })
+    }
+
     return this._contextData.get(world)!.contextPromise.then(contextOrDestroyedReason => {
       if (contextOrDestroyedReason instanceof js.ExecutionContext)
         return contextOrDestroyedReason;
